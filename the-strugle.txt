const fullStack = [
  ["HTML", "CSS", "JS", "React"],
  ["Node", "Express", "MongoDB"],
];

for (let i = 0; i < fullStack.length; i++) {
  for (let j = 0; j < fullStack[i].length; j++) {
    console.log(fullStack[i][j]);
  }
}
HTML
CSS
JS
React
Node
Express
MongoDB
------------
const fruit = ["banana", "orange", "mango", "lemon"];
const revfruit = [];
for (let i = fruit.length - 1; i >= 0; i--) {
  let index = fruit[i];
  revfruit.push(index);
}

----------
THE LONGEST IN AN ARRAY 
let longestTech = [];
for (let i = 1; i < webTechs.length; i++) {
  if (webTechs[i].length > longestTech.length) {
    longestTech = webTechs[i];
  }
}
----------
FIND OUT HOW TO REVERSE AND SORT ARRAY IN A LOOP

let RevDevArr = [];
for (let i = countries.length - 1; i >= 0; i--) {
  let index = countries[i];
  RevDevArr.push(index.toUpperCase());
}
console.log(RevDevArr.sort());
--------------
const month = prompt("Enter the number of the month");
const year = prompt("Enter the year");
let daysIn = numOfDays(month, year);
function leap(year) {
  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}
function numOfDays(month, year) {
  const days = {
    1: 31,
    2: leap(year) ? 29 : 28,
    3: 31, // March
    4: 30, // April
    5: 31, // May
    6: 30, // June
    7: 31, // July
    8: 31, // August
    9: 30, // September
    10: 31, // October
    11: 30, // November
    12: 31, // December
  };
  return days[month];
}
numOfDays();
alert(`${month} in ${year} was ${daysIn}`);
------------
find out if a something does exist in the arry
let enterCorp = prompt("Enter a company name");
let index = itCompanies.indexOf(enterCorp);
if (index == -1) {
  alert("this company dose not exist");
} else {
  alert(`${itCompanies[index]} does exist`);
}
-------------
for (let i = 1; i <= 10; i++) {
  let outPut = "";
  for (let j = 1; j < i; j++) {
    outPut += "#";
  }
  console.log(outPut);
}
---------
print arry items in difernt lines
const fullStack = [
  ["HTML", "CSS", "JS", "React"],
  ["Node", "Express", "MongoDB"],
];
for (let i = fullStack.length; i < fullStack.length; i++) {
  console.log(i);
}
---------

function swapValues(x, y) {
  let temp = x;
  x = y;
  y = temp;

  return `x => ${x}, y => ${y}`;
}
console.log(swapValues(4, 3));
---------------
function userIdGeneratedByUser() {
  const numberOfCharacters = parseInt(
    prompt("What is the length of the UserIDs?")
  );
  const userIDsGenerated = parseInt(prompt("How many UserIDs?"));

  let lettersNumsSTR =
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
  let splitLetterNum = lettersNumsSTR.split("");
  let userIds = [];

  for (let i = 0; i < userIDsGenerated; i++) {
    let userId = "";
    for (let j = 0; j < numberOfCharacters; j++) {
      let random = Math.floor(Math.random() * splitLetterNum.length);
      userId += splitLetterNum[random];
    }
    userIds.push(userId);
  }

  return userIds;
}

console.log(userIdGeneratedByUser());
-----------------
function rgbColorGeneratorArry(amountHex) {
  let hex = [];
  for (let i = 0; i < amountHex; i++) {
    let rgbValues = [];
    for (let j = 0; j < 3; j++) {
      let random = Math.floor(Math.random() * 256);
      rgbValues.push(random);
    }
    hex.push(rgbValues);
  }
  return hex;
}
function formatRGB(rgbValues) {
  return `rgb(${rgbValues.join(", ")})`;
}

const rgbArray = rgbColorGeneratorArry(4);
for (const rgbValues of rgbArray) {
  console.log(formatRGB(rgbValues));
}

In this code:

The rgbColorGeneratorArry function generates an array of arrays, where each sub-array contains three random RGB values between 0 and 255.
The formatRGB function takes an array of RGB values and formats it as an rgb(r, g, b) string using the join method to concatenate the values with commas.
The rgbArray is generated using the rgbColorGeneratorArry function.
A loop iterates through the rgbArray and uses the formatRGB function to format each set of RGB values and then prints the formatted strings to the console.
-----------

const rgb2hex = (r, g, b) => {
  return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
};

console.log(rgb2hex(0, 0, 0));