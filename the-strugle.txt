function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);

}
Here's a breakdown of how the function works:

string.charAt(0):

string is the input parameter, which is a string.
.charAt(0) is a method that operates on a string and retrieves the character at the specified index. In this case, it retrieves the character at index 0, which is the first character of the string.
.toUpperCase():

After getting the first character of the string, this method is used to convert it to uppercase. This ensures that the first letter of the string is capitalized.
string.slice(1):

.slice(1) is a method that operates on a string and extracts a portion of the string starting from the character at index 1 (the second character) to the end of the string.
This part of the code extracts the rest of the original string (excluding the first character), effectively making it lowercase.
+:

The + operator is used to concatenate the uppercase first character with the lowercase rest of the string.
Finally, the function returns the result of this concatenation, which is the input string with the first letter capitalized.

-----------

const fullStack = [
  ["HTML", "CSS", "JS", "React"],
  ["Node", "Express", "MongoDB"],
];

for (let i = 0; i < fullStack.length; i++) {
  for (let j = 0; j < fullStack[i].length; j++) {
    console.log(fullStack[i][j]);
  }
}
HTML
CSS
JS
React
Node
Express
MongoDB
------------
const fruit = ["banana", "orange", "mango", "lemon"];
const revfruit = [];
for (let i = fruit.length - 1; i >= 0; i--) {
  let index = fruit[i];
  revfruit.push(index);
}

----------
THE LONGEST IN AN ARRAY 
let longestTech = [];
for (let i = 1; i < webTechs.length; i++) {
  if (webTechs[i].length > longestTech.length) {
    longestTech = webTechs[i];
  }
}
----------
FIND OUT HOW TO REVERSE AND SORT ARRAY IN A LOOP

let RevDevArr = [];
for (let i = countries.length - 1; i >= 0; i--) {
  let index = countries[i];
  RevDevArr.push(index.toUpperCase());
}
console.log(RevDevArr.sort());
--------------
const month = prompt("Enter the number of the month");
const year = prompt("Enter the year");
let daysIn = numOfDays(month, year);
function leap(year) {
  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}
function numOfDays(month, year) {
  const days = {
    1: 31,
    2: leap(year) ? 29 : 28,
    3: 31, // March
    4: 30, // April
    5: 31, // May
    6: 30, // June
    7: 31, // July
    8: 31, // August
    9: 30, // September
    10: 31, // October
    11: 30, // November
    12: 31, // December
  };
  return days[month];
}
numOfDays();
alert(`${month} in ${year} was ${daysIn}`);
------------
find out if a something does exist in the arry
let enterCorp = prompt("Enter a company name");
let index = itCompanies.indexOf(enterCorp);
if (index == -1) {
  alert("this company dose not exist");
} else {
  alert(`${itCompanies[index]} does exist`);
}
-------------
for (let i = 1; i <= 10; i++) {
  let outPut = "";
  for (let j = 1; j < i; j++) {
    outPut += "#";
  }
  console.log(outPut);
}
---------
print arry items in difernt lines
const fullStack = [
  ["HTML", "CSS", "JS", "React"],
  ["Node", "Express", "MongoDB"],
];
for (let i = fullStack.length; i < fullStack.length; i++) {
  console.log(i);
}
---------

function swapValues(x, y) {
  let temp = x;
  x = y;
  y = temp;

  return `x => ${x}, y => ${y}`;
}
console.log(swapValues(4, 3));
---------------
function userIdGeneratedByUser() {
  const numberOfCharacters = parseInt(
    prompt("What is the length of the UserIDs?")
  );
  const userIDsGenerated = parseInt(prompt("How many UserIDs?"));

  let lettersNumsSTR =
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
  let splitLetterNum = lettersNumsSTR.split("");
  let userIds = [];

  for (let i = 0; i < userIDsGenerated; i++) {
    let userId = "";
    for (let j = 0; j < numberOfCharacters; j++) {
      let random = Math.floor(Math.random() * splitLetterNum.length);
      userId += splitLetterNum[random];
    }
    userIds.push(userId);
  }

  return userIds;
}

console.log(userIdGeneratedByUser());
-----------------
function rgbColorGeneratorArry(amountHex) {
  let hex = [];
  for (let i = 0; i < amountHex; i++) {
    let rgbValues = [];
    for (let j = 0; j < 3; j++) {
      let random = Math.floor(Math.random() * 256);
      rgbValues.push(random);
    }
    hex.push(rgbValues);
  }
  return hex;
}
function formatRGB(rgbValues) {
  return `rgb(${rgbValues.join(", ")})`;
}

const rgbArray = rgbColorGeneratorArry(4);
for (const rgbValues of rgbArray) {
  console.log(formatRGB(rgbValues));
}

In this code:

The rgbColorGeneratorArry function generates an array of arrays, where each sub-array contains three random RGB values between 0 and 255.
The formatRGB function takes an array of RGB values and formats it as an rgb(r, g, b) string using the join method to concatenate the values with commas.
The rgbArray is generated using the rgbColorGeneratorArry function.
A loop iterates through the rgbArray and uses the formatRGB function to format each set of RGB values and then prints the formatted strings to the console.
-----------

const rgb2hex = (r, g, b) => {
  return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
};

console.log(rgb2hex(0, 0, 0));
----------

function generateColors(type, amount) {
  if (type === "hex") {
    return hexColorGeneratorArry(amount);
  } else if (type === "rgb") {
    return rgbColorGeneratorArry(amount);
  } else {
    return "that is not a color type nor a amount of colors";
  }
}
function generateColors(type, amount) {
  if (type === "hex") {
    return hexColorGeneratorArray(amount);
  } else if (type === "rgb") {
    return rgbColorGeneratorArray(amount);
  } else {
    return "that is not a color type nor a amount of colors";
  }
}

function hexColorGeneratorArray(amountHex) {
  let hex = [];
  const hexLetters = [0, 1, 2, 3, 4, 6, 7, 8, 9, "a", "b", "c", "d", "e", "f"];
  for (let i = 0; i < amountHex; i++) {
    let hexValues = [];
    for (let j = 0; j < 6; j++) {
      let random = Math.floor(Math.random() * hexLetters.length);
      hexValues.push(hexLetters[random]);
    }
    hex.push(formatHex(hexValues));
  }
  return hex;
}

function formatHex(hexValues) {
  return `#${hexValues.join("")}`;
}

function rgbColorGeneratorArray(amountRGB) {
  let rgbColors = [];
  for (let i = 0; i < amountRGB; i++) {
    let rgbValues = [];
    for (let j = 0; j < 3; j++) {
      let random = Math.floor(Math.random() * 256);
      rgbValues.push(random);
    }
    rgbColors.push(formatRGB(rgbValues));
  }
  return rgbColors;
}

function formatRGB(rgbValues) {
  return `rgb(${rgbValues.join(", ")})`;
}

console.log(generateColors("hex", 2));
console.log(generateColors("rgb", 2));

------------
function shuffleArray(arr) {
  let shuffleArr = [];
  while (arr.length > 0) {
    let randomIndex = Math.floor(Math.random() * arr.length);
    let removedItem = arr.splice(randomIndex, 1)[0];
    shuffleArr.push(removedItem);
  }
  return shuffleArr;
}
----------
https://www.freecodecamp.org/news/how-to-factorialize-a-number-in-javascript-9263c89a4b38/

function factorialize(num) {
  if (num < 0) return -1;
  else if (num == 0) return 1;
  else {
    return num * factorialize(num - 1);
  }
}
console.log(factorialize(-5));
-----------
function arryItemsUnique(array) {
  const uniqueSet = new Set(array);
  return uniqueSet.size === array.length;
}
OR NESTED LOOP:
function hasDuplicates(array) {
  for (let i = 0; i < array.length; i++) {
    for (let j = i + 1; j < array.length; j++) {
      if (array[i] === array[j]) {
        return true;
      }
    }
  }
  return false;
}
learn set() example:
const stringArray = ["apple", "banana", "orange", "apple", "grape"];
const uniqueStrings = new Set(stringArray);
console.log(uniqueStrings);
-----------
same data type arry
if (array.length === 0) {
    return true;  // Empty array is considered to have uniform data type.
  }
  
  const firstType = typeof array[0];
  
  for (let i = 1; i < array.length; i++) {
    if (typeof array[i] !== firstType) {
      return false;  // If any element's type differs, return false.
    }
  }
  
  return true;  // If all elements have the same type, return true.
  ---------
  function isValidVariable(variableName) {
  // Check if the variable name starts with a letter, $, or _
  if (!/^[a-zA-Z$_]/.test(variableName)) {
    return false;
  }
  // Check if the rest of the variable name contains only letters, numbers, $, or _
  if (!/^[a-zA-Z0-9$_]*$/.test(variableName)) {
    return false;
  }
}
--------
const itCompanies = [
  "Facebook",
  "Google",
  "Microsoft",
  "Apple",
  "IBM",
  "Oracle",
  "Amazon",
];
let enterCorp = "Apple";
let index = itCompanies.indexOf(enterCorp);
if (index == -1) {
  console.log("this company dose not exist");
} else {
  console.log(`${itCompanies[index]} does exist`);
}
--------
function isPrime(num) {
    if (num <= 1) return false;
    if (num <= 3) return true;
  
    if (num % 2 === 0 || num % 3 === 0) return false;
  
    for (let i = 5; i * i <= num; i += 6) {
      if (num % i === 0 || num % (i + 2) === 0) return false;
    }
  
    return true;
  }
  for (let i = 0; i <= 100; i++) {
    if (isPrime(i)) {
      console.log(i);
    }
  }
  -------
  let nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];

// Function to shuffle the array using the Fisher-Yates algorithm
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

shuffleArray(nums);

let ranNum = nums.slice(0, 5);
console.log(ranNum);
------
let lettersAndNums =
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxwz12345647890";
let strSplit = lettersAndNums.split("");
console.log(strSplit);
for (let i = 1; i <= 1; i++) {
  let userId = "";
  for (let j = 1; j < 6; j++) {
    let random = Math.floor(Math.random() * strSplit.length);
    userId += strSplit[random];
  }
  console.log(userId);
}
----------
fillter out array items that have more then one letter in this case the letter "o"
let filteredCompanies = [];

for (let i = 0; i < itCompanies.length; i++) {
  let company = itCompanies[i];
  let count = 0;

  for (let j = 0; j < company.length; j++) {
    if (company[j].toLowerCase() === "o") {
      count++;
    }
  }

  if (count >= 2) {
    filteredCompanies.push(company);
  }
}

console.log(filteredCompanies);
-----------
23





